<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>drd on Nick</title>
    <link>https://nearwood.dev/tags/drd/</link>
    <description>Recent content in drd on Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 Nicholas Earwood</copyright>
    <lastBuildDate>Sat, 21 May 2016 22:06:00 +0000</lastBuildDate>
    
	<atom:link href="https://nearwood.dev/tags/drd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fixing mirrorlist on Arch Linux Arm (Raspberry Pi)</title>
      <link>https://nearwood.dev/fixing-mirrorlist-on-arch-linux-arm-raspberry-pi/</link>
      <pubDate>Sat, 21 May 2016 22:06:00 +0000</pubDate>
      
      <guid>https://nearwood.dev/fixing-mirrorlist-on-arch-linux-arm-raspberry-pi/</guid>
      <description>I hadn&#39;t updated my Raspberry Pi (a B+ model for my rpi-drd project) in about a year. Pacman -Syu kept complaining about being unable to find files on any of the mirrors.
So I, without thinking, ran reflector on an x86 host and copied it over. Oops. Now it definitely can&#39;t find packages.
The archlinuxarm.org website gave me the hostname I needed, but not the entire URL. Put this in your mirrorlist (as the sole entry) to restore functionality:</description>
    </item>
    
    <item>
      <title>Raspberry Pi Robot – Assembly Part 2</title>
      <link>https://nearwood.dev/raspberry-pi-robot-assembly-part-2/</link>
      <pubDate>Tue, 08 Mar 2016 01:47:20 +0000</pubDate>
      
      <guid>https://nearwood.dev/raspberry-pi-robot-assembly-part-2/</guid>
      <description>This was the hardest part. If you wire the wrong things together you can brick your Pi. I took some time to decide on which pins to use, and after assembly and testing everything worked. I&#39;ll explain which pins I picked, but note that this information will not work with other hardware configurations.[I originally had a Model B Pi, but due to needing the second hardware PWM (which is hidden on the B), switched to the B+.</description>
    </item>
    
    <item>
      <title>Raspberry Pi Robot – Assembly Part 1</title>
      <link>https://nearwood.dev/raspberry-pi-robot-assembly-part-1/</link>
      <pubDate>Fri, 26 Dec 2014 15:43:15 +0000</pubDate>
      
      <guid>https://nearwood.dev/raspberry-pi-robot-assembly-part-1/</guid>
      <description>So you&#39;ve got a bunch of parts, assembly is pretty easy. I&#39;m going to skip over most of the chassis assembly since it came with instructions, but I have a couple pointers and I&#39;ll go over how I attached the encoders. Then I&#39;ll talk about soldering the motor controller and wiring the encoders up, and which pins to pick from the GPIO of the Pi.
So this is what the chassis looks like fully assembled:</description>
    </item>
    
    <item>
      <title>Raspberry Pi – Cross-compiling</title>
      <link>https://nearwood.dev/raspberry-pi-robot-cross-compiling/</link>
      <pubDate>Mon, 01 Dec 2014 02:26:47 +0000</pubDate>
      
      <guid>https://nearwood.dev/raspberry-pi-robot-cross-compiling/</guid>
      <description>&lt;p&gt;Now that you have the hardware built and tested (although that&#39;s not necessary), you can either use the code I&#39;ve written-which is specific to the hardware and environment I have, or compile your own version. If you want to compile your own there are two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compile on the Pi itself&lt;/li&gt;
&lt;li&gt;Compile on an ARM virtual machine&lt;/li&gt;
&lt;li&gt;Cross-compile on a faster machine&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The trade off? Compiling on the Pi is slow (very slow). The virtual machine is a marked improvement for compiling speed, but is complicated to setup. Cross-compiling is about the same difficulty as setting up a virtual machine but a bit faster and less &amp;ldquo;bulky&amp;rdquo;. So it depends. The virtual machine is nice if you have a lot of libraries you want to use, since you&#39;ll have to compile all of them to be available for linking. If any of them have poor autoconfig support, it might be a pain to fix if you weren&#39;t already on the target machine. But, since I just needed one or two popular libraries, I decided to setup cross-compiling from my host (x86_64) machine.&lt;/p&gt;
&lt;p&gt;The last time I setup cross-compiling it was on Gentoo, and it wasn&#39;t pleasant. However, after a little bit of research it looks like the &lt;a href=&#34;https://crosstool-ng.org/&#34; target=&#34;_blank&#34;&gt;crosstool-ng project&lt;/a&gt; is pretty popular and useful. I only had to patch one tiny thing.&lt;/p&gt;
&lt;p&gt;Here&#39;s the overall process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install crosstool-ng&lt;/li&gt;
&lt;li&gt;Configure a cross toolchain with it&lt;/li&gt;
&lt;li&gt;Try and build the toolchain&lt;/li&gt;
&lt;li&gt;Use the toolchain to build your Pi code&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse engineering on Nick</title>
    <link>https://blog.nearwood.net/tags/reverse-engineering/</link>
    <description>Recent content in reverse engineering on Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2019 Nicholas Earwood</copyright>
    <lastBuildDate>Sat, 28 Oct 2017 03:06:49 +0000</lastBuildDate>
    
	<atom:link href="https://blog.nearwood.net/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reverse Engineering the firmware on a Kenwood DDX9903S</title>
      <link>https://blog.nearwood.net/reverse-engineering-the-firmware-on-a-kenwood-ddx9903s/</link>
      <pubDate>Sat, 28 Oct 2017 03:06:49 +0000</pubDate>
      
      <guid>https://blog.nearwood.net/reverse-engineering-the-firmware-on-a-kenwood-ddx9903s/</guid>
      <description>&lt;p&gt;I bought and really like my Kenwood Excelon DDX9903S headunit. I had it in my WRX, and moved it to my LS430. It supports Android Auto and CarPlay, which I find really useful when driving.&lt;/p&gt;

&lt;p&gt;However, it has a nag screen every time it boots up. This got me curious as to how it worked, and see if it could be patched to skip this disclaimer. I figured it probably ran Linux on a SoC, as pretty much everything does nowadays. So I grabbed the latest firmware for it (mine was already updated to it), and started probing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;S_V2_7_0008_0600_AT1.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Extract that and you get 3 folders under S_V2_7_0008_0600/:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;BOOT_V2_7_0008_0600_release/
MAIN_V1_0_2758_0400/
SOC_V2_7_0008_0600/
&lt;/pre&gt;

&lt;p&gt;In each there&amp;#8217;s a .nfu file, which I&amp;#8217;ve never encountered before. I ran binwalk on each:&lt;/p&gt;

&lt;pre class=&#34;brush: plain; light: true; title: ; notranslate&#34; title=&#34;&#34;&gt;[BOOT_V2_7_0008_0600_release]$ binwalk Boot_2.7.0008.0600.nfu
DECIMAL HEXADECIMAL DESCRIPTION
--------------------------------------------------------------------------------
248776 0x3CBC8 Android bootimg, kernel size: 0 bytes, kernel addr: 0x4F525245, ramdisk size: 1226848850 bytes, ramdisk addr: 0x6C61766E, product name: &#34;ERROR: Cannot read kernel image&#34;
1571592 0x17FB08 ELF, 64-bit LSB shared object, AMD x86-64, version 1 (SYSV)
2358024 0x23FB08 ELF, 64-bit LSB shared object, AMD x86-64, version 1 (SYSV)
3209992 0x30FB08 ELF, 64-bit LSB shared object, AMD x86-64, version 1 (SYSV)
&lt;/pre&gt;

&lt;p&gt;Surprise, surprise, it runs Android. But, I&amp;#8217;m thinking this image is possibly just the firmware updater, and not what I am looking for.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>